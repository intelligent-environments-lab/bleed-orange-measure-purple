# -*- coding: utf-8 -*-
"""
Created on Thu Feb 13 09:30:11 2020

@author: CalvinL2
"""

# %% Imports
import os

import pandas as pd

from sensors.common.common_parent_datafile import CommonFile
from sensors.common.util.importer import Util

# %%
class PAfile(CommonFile):
    """Stores and manipulates data from one file generated by a PurpleAir sensor"""

    def __init__(self, filename, keepOutliers=True):
        # BUG Need to discriminate between primary and secondary files
        data = pd.read_csv(filename, index_col=False, engine='c')

        self.filename = filename[filename.rfind('/')+1:]

        def _parse_filename(filename):
            filename = filename[filename.rfind('\\')+1:]
            filename = filename.replace(' B', '[B]')
            filename = filename.replace('(', '').replace(')', '')
            filename = filename.replace('.csv', '')

            filename = filename.split(' ')

            self.sensorname = filename[0]
            self.sensor_environment = filename[1]
            self.latitude = float(filename[2])
            self.longitude = float(filename[3])

        _parse_filename(self.filename)

        timestamps = CommonFile.to_datetime(data['created_at'], '%Y-%m-%d %H:%M:%S %Z')
        data.insert(0, 'time', timestamps)
        data = data.set_index('time')

        super().__init__(data, keepOutliers=keepOutliers)

    @property
    def pm25(self):
        """Returns PM 2.5 values in a panda series."""
        return self['PM2.5_ATM_ug/m3']

    @property
    def temperature(self):
        """Returns temperature values in a panda series."""
        return self['Temperature_F']

    @property
    def humidity(self):
        """Returns temperature values in a panda series."""
        return self['Humidity_%']



    
class PAfiles2():
    def __init__(self, parent_dir, keepOutliers=True):
        filepaths = PAfiles2.find_purpleair_in_subdirs(parent_dir)
        self.files = self.import_pa_files(filepaths, keepOutliers)
        self.files = self.merge_data(self.files)
    
    
    @Util.caching
    def import_pa_files(self, filepaths, keepOutliers):
        print('Importing files')
        return [PAfile(filepath, keepOutliers=keepOutliers) for filepath in filepaths]
            
    @staticmethod
    def find_purpleair_in_subdirs(parent_dir):
        print('Identifying files in subdirectories')
        return [parent_dir+'\\'+dir+'\\'+filename for dir in os.listdir(parent_dir)
                if os.path.isdir(parent_dir+'\\'+dir)
                for filename in os.listdir(parent_dir+'\\'+dir)]    

    def merge_data(self,files):
        print('Merging files')
        condensed_set = {}
        for file in files:
            if file.sensorname in condensed_set:
                stored_file = condensed_set[file.sensorname]
                stored_file.data = pd.concat([stored_file.data, file.data])
                condensed_set[file.sensorname] = stored_file
            else:
                condensed_set[file.sensorname] = file            
        return condensed_set
    
    def __getitem__(self, key):
        return self.files[key]

    def __iter__(self):
        return (file for file in self.files.values())
    
    def __str__(self):
        return str(self.files)
    
class PAfiles():
    """An object to import and store multiple PAfile objects"""
    def __init__(self, file_dir, keepOutliers=True):
        files = Util.import_with_caching(PAfiles.import_pa_files, os.getcwd(),
                                         file_dir, keepOutliers=keepOutliers)
        self.files = {file.sensorname:file for file in files}

    def __getitem__(self, key):
        return self.files[key]

    def __iter__(self):
        return (file for file in self.files.values())
    
    def __str__(self):
        return str(self.files)
    
    @staticmethod
    def import_pa_files(cwd, file_dir, keepOutliers=True):
        """Returns a list of PAfile for every PurpleAir csv in the specified directory"""
        return [PAfile(file_dir+'\\'+filename, keepOutliers = keepOutliers)
                for filename in os.listdir(cwd+'\\'+file_dir)
                if filename.endswith(".csv") and filename.startswith("PA")]
