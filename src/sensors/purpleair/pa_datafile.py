# -*- coding: utf-8 -*-
"""
Created on Thu Feb 13 09:30:11 2020

@author: CalvinL2
"""

# %% Imports
import os

import pandas as pd

from sensors.common.common_parent_datafile import CommonFile
from sensors.common.util.importer import Util

# %% Rest of File
class PAfile(CommonFile):
    """Stores and manipulates data from one file generated by a PurpleAir sensor"""
    def __init__(self, filename, keepOutliers=True):
        # BUG Need to discriminate between primary and secondary files
        data = pd.read_csv(filename, index_col=False, engine='c', 
                           usecols=['created_at','PM2.5_ATM_ug/m3','Temperature_F', 'Humidity_%'])

        self.filename = filename[filename.rfind('/')+1:]
        self._parse_filename(self.filename)

        timestamps = CommonFile.to_datetime(data['created_at'], '%Y-%m-%d %H:%M:%S %Z')
        data.insert(0, 'time', timestamps)
        data = data.set_index('time')

        super().__init__(data, keepOutliers=keepOutliers)

    @property
    def pm25(self):
        """Returns PM 2.5 values in a panda series."""
        return self['PM2.5_ATM_ug/m3']

    @property
    def temperature(self):
        """Returns temperature values in a panda series."""
        return self['Temperature_F']

    @property
    def humidity(self):
        """Returns temperature values in a panda series."""
        return self['Humidity_%']

    def _parse_filename(self, filename):
        filename = filename[filename.rfind('\\')+1:]
        filename = filename.replace(' B', '[B]')
        filename = filename.replace('(', '').replace(')', '')
        filename = filename.replace('.csv', '')

        filename = filename.split(' ')

        self.sensorname = filename[0]
        self.sensor_environment = filename[1]
        self.latitude = float(filename[2])
        self.longitude = float(filename[3])


class PAfiles():
    """Stores multiple PAfile objects"""
    def __init__(self, parent_dir, keepOutliers=True, level=2):
        filepaths = PAfiles.find_purpleair_in_subdirs(parent_dir)
        if level==1:
            filepaths = PAfiles.find_purpleair_in_dir(parent_dir)
        files = PAfiles.import_pa_files(filepaths, keepOutliers)
        self.files = PAfiles.merge_data(files)

    
    @staticmethod
    def import_pa_files(filepaths, keepOutliers):
        """Creates PAfile objects from the provided csv paths"""
        return [PAfile(filepath, keepOutliers=keepOutliers) for filepath in filepaths]

    @staticmethod
    def find_purpleair_in_subdirs(parent_dir):
        """Searches for purple csvs in subdirectories one level down from the given parent"""
        return [parent_dir+'\\'+folder+'\\'+filename for folder in os.listdir(parent_dir)
                if os.path.isdir(parent_dir+'\\'+folder)
                for filename in os.listdir(parent_dir+'\\'+folder)]
    @staticmethod
    def find_purpleair_in_dir(parent_dir):
        """Searches for purple csvs in current directory"""
        return [parent_dir+'\\'+filename 
                for filename in os.listdir(parent_dir)]
        
    @staticmethod
    def merge_data(files):
        """For each sensor, the corresponding monthly data is aggregated into a single dataframe"""
        condensed_set = {}
        for file in files:
            if file.sensorname in condensed_set:    # Check if file already and merge if true
                stored_file = condensed_set[file.sensorname]
                stored_file.data = pd.concat([stored_file.data, file.data])
                condensed_set[file.sensorname] = stored_file
            else:                                   # Otherwise just add the file
                condensed_set[file.sensorname] = file
        return condensed_set
    
    def get_average(self, param):
        """Returns the data for a column averaged across all sensors"""
        aggregated_data = [file.data.resample(freq).mean()[param].rename(file.sensorname) 
                      for file in self.files.items() if file[param] is not None]
    
        aggregated_data =  pd.concat(combined_data, axis=1) #columns = sensors, rows = pm values
        average_data = combined_data.mean(axis=1)  #average all sensors
        
        return average_data #panda series

    def __getitem__(self, key):
        return self.files[key]

    def __iter__(self):
        return (file for file in self.files.values())

    def __str__(self):
        return str(self.files)
